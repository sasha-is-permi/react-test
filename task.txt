Тестовое задание

Необходимо разработать web-приложение со следующими функциональными возможностями:

Главная страница — Отображение списка задач
При загрузке приложения отображается список всех задач.
Каждая задача в списке имеет:
Текст задачи.
Чекбокс для отметки задачи как "выполненной".
Кнопку "Редактировать".
Кнопку "Удалить".
Список задач должен поддерживать фильтрацию по статусу: "Все", "Активные", "Выполненные".

Создание новой задачи
На странице должна быть форма для добавления новой задачи (например, поле ввода и кнопка "Добавить").
Валидация: Нельзя добавить пустую задачу.
После добавления задача появляется в общем списке.

Редактирование задачи
При нажатии на кнопку "Редактировать" текст задачи должен превращаться в поле ввода, 
позволяя пользователю изменить его. Появляются кнопки "Сохранить" и "Отмена".
После сохранения измененный текст отображается в списке.

Изменение статуса и удаление
При клике на чекбокс статус задачи меняется на "выполненная" / "активная".
Визуально выполненные задачи должны отличаться (например, перечеркнутый текст).
При нажатии на кнопку "Удалить" задача удаляется из списка.

Эмуляция API:
Все операции (получение, создание, обновление, удаление) должны быть асинхронными.
 Для этого создайте модуль-сервис (например, api.ts), который будет эмулировать работу с бэкендом:
Храните массив задач в памяти (можно начать с нескольких предустановленных).
Каждая функция сервиса (getTasks, createTask и т.д.) должна возвращать Promise
 и иметь искусственную задержку (например, через setTimeout на 500-1000 мс).
Это позволит проверить, как вы работаете с состояниями загрузки, ошибками и асинхронностью в целом.

Ключевое требование к UX: Приложение должно быть отзывчивым. Пока идет "загрузка" данных 
(во время setTimeout), пользователь должен видеть индикаторы загрузки (spinners/loaders).

Требования к реализации (стек и подходы):
Фреймворк: React (последняя стабильная версия).
Язык: TypeScript. Весь код должен быть строго типизирован. Определите четкий тип для задачи (Task).
Управление состоянием: Это ключевая часть задания. Выберите подход, который считаете наиболее подходящим 
для этой задачи, и будьте готовы объяснить свой выбор.
Вариант А (предпочтительный): Используйте библиотеку для управления состоянием сервера,
 такую как React Query или SWR. 
Даже при работе с эмулированным API, это покажет ваше умение работать с кэшем, асинхронными данными
и их инвалидацией.
Вариант Б: Используйте глобальный стейт-менеджер, такой как Redux Toolkit или Zustand.


UI-компоненты: Используйте любую популярную UI-библиотеку (MUI, Ant Design, Chakra UI) 
или стилизуйте компоненты самостоятельно (например, с помощью CSS Modules или Styled-components).
 Главное — аккуратный и функциональный интерфейс.
Сборка: Vite или Create React App.

Критерии оценки (на что мы будем смотреть):
Архитектура и структура проекта: Логичное разделение на компоненты, хуки, сервисы.
 Насколько легко в проекте ориентироваться.
Качество кода и TypeScript: Чистый, читаемый, поддерживаемый код. 
Грамотное использование типов для описания данных и пропсов.
Управление состоянием: Самый важный пункт. Обоснованность выбора стейт-менеджера
 и качество его применения. Как вы решаете проблемы обновления UI после асинхронных операций.
Компонентный подход: Насколько хорошо вы декомпозировали UI на переиспользуемые и логически
 завершенные компоненты.
Внимание к UX: Корректная обработка состояний загрузки и возможных ошибок (хотя бы эмулированных).
Что будет большим плюсом:
Написание нескольких unit-тестов для ключевой логики (например, для редьюсера, хука или mock-API) 
с использованием Jest и React Testing Library.
Сохранение состояния задач между перезагрузками страницы с использованием localStorage.
Развертывание готового приложения на Vercel, Netlify или GitHub Pages.
Как сдать задание:
Загрузите исходный код в публичный репозиторий на GitHub и пришлите нам ссылку. 
В README.md файле кратко опишите, как запустить проект локально,
 и (опционально) почему вы выбрали тот или иной подход к управлению состоянием.
